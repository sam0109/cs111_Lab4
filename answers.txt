# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Sam Sobell
Student ID: 704277487
Email: sam.sobell@gmail.com

# Partner 2 (if you're working in a team)
Name: David Brown
Student ID: 404260577
Email: chanbrown007@yahoo.com

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

We first download all the files first in parallel by each forking each task.
We then wait for every child process to finish before then continuing to
upload in parallel. We once again fork each task to upload in parallel.

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

There were two locations where strcpy was used to copy a filename directly 
from the peer's request. A long filename could have caused a segfault or 
buffer overrun, so it was fixed using strncpy with the max filename size 
as the max size argument. Each location is marked with a comment.

We also made sure that the peer did not pass in a filename larger than
FILENAMESIZ in order to avoid huge buffers that could crash the host.

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

We added a check to make sure that the peer is not asking for 
anything outside the current directory by checking for ".." and "/" 
and moving to the next peer if those strings are found.

We increased the size of TASKBUFSIZ so that we can allow more connections

We implemented a maximum file size so that the machine cannot be flooded with 
useless data

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

Our first attack is a download attack that would a request filename that was
too large. If there were no proper security measures in place, the large file
name would then overflow the filename buffer and cause a segfault effectively
crashing a peer. This is an effective and we were inspired by to do it after
a random error occured in make run-good where we got a seg-fault from a filename
that was too large.

Our second attack is an upload attack. Instead of uploading the requested cat
jpg we return a really large file containing :D. This is an attack because we
send the user inaccurate data for an incredibly long amount of time and also
waste a lot of space on the users machine. By sending such a large file over
we are able to force the peer to wait a very long time to be able to download
the wrong file.

# Extra credit problems
#Extra credit problem:



# Add any other information you'd like us to know below this line.
